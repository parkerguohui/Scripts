using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Valve.VR.InteractionSystem;
using Valve.VR;
public class LocalCutPlaneTool : MonoBehaviour {
    private GameObject beCutThing;
    // Use this for initialization
    void Start () {
		
	}
	
	// Update is called once per frame
	void Update () {
         //if (Input.GetKeyDown(KeyCode.C))//读取键盘 键入C时 执行
            if (Input.GetMouseButtonDown(1) || SteamVR_Actions.default_Teleport.GetStateDown(SteamVR_Input_Sources.Any))
        {

            if (gameObject.tag == "ChosenTool")
            {
                beCutThing = GameObject.FindGameObjectWithTag("ChosenObject");
                if (beCutThing != null)
                {

                    Debug.Log("cut begin~~~");
                    Cut();
                }
                else
                {
                    Debug.Log("there is nothing to cut!");
                }

            }
        }
    }

    private void Cut()
    {
        int startTime = System.Environment.TickCount;
        //根据本切割工具网格顶点形成切割面
        Vector3[] v = transform.GetComponent<MeshFilter>().mesh.vertices;
        Plane cutPlane = new Plane(transform.TransformPoint(v[0]), transform.TransformPoint(v[1]), transform.TransformPoint(v[v.Length - 1]));
        //Debug.Log(cutPlane.normal);
        Vector3[] cutPlanePoints = new Vector3[4];
        cutPlanePoints[0] = transform.TransformPoint(v[10]);//切割平面4个顶点
        cutPlanePoints[1] = transform.TransformPoint(v[0]);
        cutPlanePoints[2] = transform.TransformPoint(v[110]);
        cutPlanePoints[3] = transform.TransformPoint(v[120]);


        //把切割面转化为被切割物体的当地坐标 (cutPlane.normal * -cutPlane.distance)表示？ 获取原点垂直于该平面的向量   (于平面的交点)
        Vector3 localPoint = beCutThing.transform.InverseTransformPoint(cutPlane.normal * -cutPlane.distance);
        //Debug.Log(localPoint);
        Vector3 localSplitPlaneNormal = beCutThing.transform.InverseTransformDirection(cutPlane.normal);
        localSplitPlaneNormal.Normalize();//生成法向量
        //Debug.Log("法向量模长:"+localSplitPlaneNormal.sqrMagnitude);
        cutPlanePoints[0] = beCutThing.transform.InverseTransformPoint(cutPlanePoints[0]);//打印一下跟上面是否一样(temp)
        cutPlanePoints[1] = beCutThing.transform.InverseTransformPoint(cutPlanePoints[1]);
        cutPlanePoints[2] = beCutThing.transform.InverseTransformPoint(cutPlanePoints[2]);
        cutPlanePoints[3] = beCutThing.transform.InverseTransformPoint(cutPlanePoints[3]);

        //根据切割面，把顶点分成两部分

        Vector3[] vertices = beCutThing.GetComponent<MeshFilter>().mesh.vertices;
        Vector3[] normals = beCutThing.GetComponent<MeshFilter>().mesh.normals;
        bool[] vertexAbovePlane;
        vertexAbovePlane = new bool[vertices.Length];
        //int[] oldToNewVertexMap = new int[vertices.Length];

        List<Vector3> newVertices1 = new List<Vector3>(vertices);//为了避免数组多次动态增加容量，给最大值
        //List<Vector3> newVertices2 = new List<Vector3>(vertices.Length);
        List<Vector3> newNormals1 = new List<Vector3>(normals);
        //List<Vector3> newNormals2 = new List<Vector3>(normals.Length);

        for (int i = 0; i < vertices.Length; i++)
        {
            Vector3 vertex = vertices[i];
            bool abovePlane = Vector3.Dot(vertex - localPoint, localSplitPlaneNormal) >= 0.0f;
            vertexAbovePlane[i] = abovePlane;
            //if (abovePlane)
            //{
            //    // Assign vertex to 1
            //    oldToNewVertexMap[i] = newVertices1.Count;
            //    newVertices1.Add(vertex);
            //    newNormals1.Add(normals[i]);
            //}
            //else
            //{
            //    // Assign vertex to 2
            //    oldToNewVertexMap[i] = newVertices2.Count;
            //    newVertices2.Add(vertex);
            //    newNormals2.Add(normals[i]);
            //}
        }
        //if (newVertices1.Count == 0 || newVertices2.Count == 0)
        //{
        //    Debug.Log("nothing be cut,over");
        //    return;
        //}
        //分三角面

        int[] indices = beCutThing.GetComponent<MeshFilter>().mesh.triangles;
        int triangleCount = indices.Length / 3;
        List<int> newTriangles1 = new List<int>(indices.Length);
        //List<int> newTriangles2 = new List<int>(indices.Length);
        List<Vector3> cutEdges1 = new List<Vector3>();
        List<Vector3> cutEdges2 = new List<Vector3>();
        for (int i = 0; i < triangleCount; i++) // 遍历每一个三角面
        {
            int index0 = indices[i * 3 + 0];
            int index1 = indices[i * 3 + 1];
            int index2 = indices[i * 3 + 2];

            bool above0 = vertexAbovePlane[index0];
            bool above1 = vertexAbovePlane[index1];
            bool above2 = vertexAbovePlane[index2];

            if (above0 && above1 && above2)
            {
                newTriangles1.Add(index0);
                newTriangles1.Add(index1);
                newTriangles1.Add(index2);
            }
            else if (!above0 && !above1 && !above2)
            {
                newTriangles1.Add(index0);
                newTriangles1.Add(index1);
                newTriangles1.Add(index2);
            }
            else
            {
                // Split triangle
                int top, cw, ccw;

                if (above1 == above2 && above0 != above1)
                {
                    top = index0;
                    cw = index1;
                    ccw = index2;
                }
                else if (above2 == above0 && above1 != above2)
                {
                    top = index1;
                    cw = index2;
                    ccw = index0;
                }
                else
                {
                    top = index2;
                    cw = index0;
                    ccw = index1;
                }
                //定义交点及交点法向量
                Vector3 cwIntersection, ccwIntersection, cwNormal, ccwNormal, core,coreNormal;

                //top点在平面上？
                if (vertexAbovePlane[top])
                {
                    SplitTriangle(localPoint, localSplitPlaneNormal, vertices, normals, top, cw, ccw, out cwIntersection, out ccwIntersection, out cwNormal, out ccwNormal);
                    //newTriangles1.Add(top);
                    //newTriangles1.Add(newVertices1.Count);
                    //newTriangles1.Add(newVertices1.Count + 1);

                    //newTriangles2.Add(newVertices2.Count + 1);//cwIntersection
                    //newTriangles2.Add(cw);
                    //newTriangles2.Add(ccw);

                    //newTriangles2.Add(ccw);
                    //newTriangles2.Add(newVertices2.Count);//ccwIntersection
                    //newTriangles2.Add(newVertices2.Count + 1);// cwIntersection


                    

                    //切割点是否在切割四边形内部  否：正常添加该三角面    是：删除该三角面，并添加切割点和切割面，记录切割点
                    Vector3 v0 = Vector3.Cross(cutPlanePoints[0] - cutPlanePoints[3], ccwIntersection - cutPlanePoints[3]);
                    Vector3 v1 = Vector3.Cross(cutPlanePoints[1] - cutPlanePoints[0], ccwIntersection - cutPlanePoints[0]);
                    Vector3 v2 = Vector3.Cross(cutPlanePoints[2] - cutPlanePoints[1], ccwIntersection - cutPlanePoints[1]);
                    Vector3 v3 = Vector3.Cross(cutPlanePoints[3] - cutPlanePoints[2], ccwIntersection - cutPlanePoints[2]);
                    
                    if (Vector3.Dot(v0, v1)<0|| Vector3.Dot(v0, v2) < 0 || Vector3.Dot(v0, v3) < 0 )
                    {
                        //该点不在四边形内    
                        ///<summary>
                        ///在增加一个判断 应对切割面只切割物体的一部分的情况
                        ///即:在检测cwIntersection不在切割面中时 再进行对ccwIntersection的判断
                        ///</summary>
                        Vector3 v4 = Vector3.Cross(cutPlanePoints[0] - cutPlanePoints[3], cwIntersection - cutPlanePoints[3]);
                        Vector3 v5 = Vector3.Cross(cutPlanePoints[1] - cutPlanePoints[0], cwIntersection - cutPlanePoints[0]);
                        Vector3 v6 = Vector3.Cross(cutPlanePoints[2] - cutPlanePoints[1], cwIntersection - cutPlanePoints[1]);
                        Vector3 v7 = Vector3.Cross(cutPlanePoints[3] - cutPlanePoints[2], cwIntersection - cutPlanePoints[2]);
                        if (Vector3.Dot(v4, v5) < 0 || Vector3.Dot(v4, v6) < 0 || Vector3.Dot(v4, v7) < 0)//仍在切割面外 直接添加 不作分割操作
                        {
                            newTriangles1.Add(index0);
                            newTriangles1.Add(index1);
                            newTriangles1.Add(index2);
                        }
                        //另一个交点在四边形内时 满足部分切割情况
                        else
                        {
                            Debug.Log("改进切割开始~");
                            SplitTriangle_other(localPoint, localSplitPlaneNormal, vertices, normals, 
                                top, cw, ccw,out core,out coreNormal, cutPlanePoints);
                            Debug.Log("开始加点~");
                            //加入点
                            newVertices1.Add(cwIntersection);
                            newVertices1.Add(core);

                            Debug.Log("开始加三角关系~");
                            //加入三角关系
                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(newVertices1.Count - 2);
                            newTriangles1.Add(cw);

                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(cw);
                            newTriangles1.Add(ccw);

                            newTriangles1.Add(top);
                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(ccw);

                            newTriangles1.Add(top);
                            newTriangles1.Add(newVertices1.Count - 2);
                            newTriangles1.Add(newVertices1.Count - 1);

                            //加入顶点法向量
                            newNormals1.Add(cwNormal);
                            newNormals1.Add(coreNormal);

                            //加入切割边
                            cutEdges1.Add(cwIntersection);
                            cutEdges1.Add(core);

                            cutEdges2.Add(GetDifferentVector3(cwIntersection));
                            cutEdges2.Add(GetDifferentVector3(core));


                        }
                    }
                    //直接进行分割
                    else
                    {
                        newTriangles1.Add(top);
                        newTriangles1.Add(newVertices1.Count);
                        newTriangles1.Add(newVertices1.Count + 1);

                        newVertices1.Add(cwIntersection);
                        newVertices1.Add(ccwIntersection);
                        newNormals1.Add(cwNormal);
                        newNormals1.Add(ccwNormal);



                        newTriangles1.Add(newVertices1.Count + 1);//cwIntersection
                        newTriangles1.Add(cw);
                        newTriangles1.Add(ccw);

                        newTriangles1.Add(ccw);
                        newTriangles1.Add(newVertices1.Count);//ccwIntersection
                        newTriangles1.Add(newVertices1.Count + 1);// cwIntersection

                        ///<summary>将点坐标做微调 使其不同 再加入点集合</summary>
                        Vector3 cwIntersectionDiffer = GetDifferentVector3(cwIntersection);
                        Vector3 ccwIntersectionDiffer = GetDifferentVector3(ccwIntersection);

                        newVertices1.Add(ccwIntersectionDiffer);
                        newVertices1.Add(cwIntersectionDiffer);
                        newNormals1.Add(ccwNormal);
                        newNormals1.Add(cwNormal);


                        cutEdges1.Add(cwIntersection);
                        cutEdges1.Add(ccwIntersection);

                        cutEdges2.Add(cwIntersectionDiffer);
                        cutEdges2.Add(ccwIntersectionDiffer);
                    }




                    //newVertices1.Add(cwIntersection);
                    //newVertices1.Add(ccwIntersection);
                    //newNormals1.Add(cwNormal);
                    //newNormals1.Add(ccwNormal);

                    //newVertices2.Add(ccwIntersection);
                    //newVertices2.Add(cwIntersection);
                    //newNormals2.Add(ccwNormal);
                    //newNormals2.Add(cwNormal);

                }
                //
                else
                {
                    SplitTriangle(localPoint, localSplitPlaneNormal, vertices, normals, top, cw, ccw, out cwIntersection, out ccwIntersection, out cwNormal, out ccwNormal);


                    //切割点是否在切割四边形内部  否：正常添加该三角面    是：删除该三角面，并添加切割点和切割面，记录切割点
                    Vector3 v0 = Vector3.Cross(cutPlanePoints[0] - cutPlanePoints[3], cwIntersection - cutPlanePoints[3]);
                    Vector3 v1 = Vector3.Cross(cutPlanePoints[1] - cutPlanePoints[0], cwIntersection - cutPlanePoints[0]);
                    Vector3 v2 = Vector3.Cross(cutPlanePoints[2] - cutPlanePoints[1], cwIntersection - cutPlanePoints[1]);
                    Vector3 v3 = Vector3.Cross(cutPlanePoints[3] - cutPlanePoints[2], cwIntersection - cutPlanePoints[2]);
                    if (Vector3.Dot(v0, v1) < 0 || Vector3.Dot(v0, v2) < 0 || Vector3.Dot(v0, v3) < 0)//即：在平面外不切割
                    {
                        //再判断 是否符合部分切割
                        Vector3 v4 = Vector3.Cross(cutPlanePoints[0] - cutPlanePoints[3], ccwIntersection - cutPlanePoints[3]);
                        Vector3 v5 = Vector3.Cross(cutPlanePoints[1] - cutPlanePoints[0], ccwIntersection - cutPlanePoints[0]);
                        Vector3 v6 = Vector3.Cross(cutPlanePoints[2] - cutPlanePoints[1], ccwIntersection - cutPlanePoints[1]);
                        Vector3 v7 = Vector3.Cross(cutPlanePoints[3] - cutPlanePoints[2], ccwIntersection - cutPlanePoints[2]);
                        
                        //判断cwIntersection
                        if (Vector3.Dot(v4, v5) < 0 || Vector3.Dot(v4, v6) < 0 || Vector3.Dot(v4, v7) < 0)
                        {
                            //该点不在四边形内 则直接添加该点 不作操作
                            newTriangles1.Add(index0);
                            newTriangles1.Add(index1);
                            newTriangles1.Add(index2);
                        }
                        else
                        {
                            //进行部分切割
                            Debug.Log("改进切割开始~");
                            SplitTriangle_other(localPoint, localSplitPlaneNormal, vertices, normals, top, cw, ccw,
                                out core,out coreNormal, cutPlanePoints);

                            newVertices1.Add(cwIntersection);
                            newVertices1.Add(core);

                            newTriangles1.Add(cw);
                            newTriangles1.Add(ccw);
                            newTriangles1.Add(newVertices1.Count - 1);

                            newTriangles1.Add(cw);
                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(newVertices1.Count - 2);

                            newTriangles1.Add(newVertices1.Count - 2);
                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(top);

                            newTriangles1.Add(newVertices1.Count - 1);
                            newTriangles1.Add(ccw);
                            newTriangles1.Add(top);

                            newNormals1.Add(cwNormal);
                            newNormals1.Add(coreNormal);

                            //加入切割边
                            cutEdges1.Add(cwIntersection);
                            cutEdges1.Add(core);

                            cutEdges2.Add(GetDifferentVector3(cwIntersection));
                            cutEdges2.Add(GetDifferentVector3(core));
                        }

                    }
                    else
                    {
                        newTriangles1.Add(newVertices1.Count + 1);//cwIntersection
                        newTriangles1.Add(cw);
                        newTriangles1.Add(ccw);

                        newTriangles1.Add(ccw);
                        newTriangles1.Add(newVertices1.Count);//ccwIntersection
                        newTriangles1.Add(newVertices1.Count + 1);// cwIntersection

                        newVertices1.Add(ccwIntersection);
                        newVertices1.Add(cwIntersection);
                        newNormals1.Add(ccwNormal);
                        newNormals1.Add(cwNormal);


                        newTriangles1.Add(top);
                        newTriangles1.Add(newVertices1.Count);
                        newTriangles1.Add(newVertices1.Count + 1);

                        Vector3 cwIntersectionDiffer = GetDifferentVector3(cwIntersection);
                        Vector3 ccwIntersectionDiffer = GetDifferentVector3(ccwIntersection);

                        newVertices1.Add(cwIntersectionDiffer);
                        newVertices1.Add(ccwIntersectionDiffer);
                        newNormals1.Add(cwNormal);
                        newNormals1.Add(ccwNormal);


                        cutEdges1.Add(ccwIntersection);
                        cutEdges1.Add(cwIntersection);

                        cutEdges2.Add(ccwIntersectionDiffer);
                        cutEdges2.Add(cwIntersectionDiffer);
                    }

                }

            }
        }
        int cutOverTime = System.Environment.TickCount;
        //------添加切割信息到Cut Position中
        Vector3 cutPosition = new Vector3();
        for (int i = 0;i<cutEdges1.Count;i=i+2)
        {
            cutPosition += cutEdges1[i];
        }
        cutPosition = cutPosition / (cutEdges1.Count / 2);
        //Plane plane = new Plane(localSplitPlaneNormal, cutPosition);
        CutPosition.cutObject.Add(beCutThing);
        CutPosition.cutPoint.Add(cutPosition);
        CutPosition.cutPlaneNormal.Add(localSplitPlaneNormal);
        //------

        //FillCutEdges(a, b, cutEdges, localSplitPlaneNormal);
        int edgeCount = cutEdges1.Count / 2;

        List<Vector3> points = new List<Vector3>(edgeCount);
        List<int> outline = new List<int>(edgeCount * 2);

        int start = 0;

        for (int current = 0; current < edgeCount; current++)
        {
            int next = current + 1;

            // Find the next edge
            int nearest = start;
            float nearestDistance = (cutEdges1[current * 2 + 1] - cutEdges1[start * 2 + 0]).sqrMagnitude;

            for (int other = next ; other < edgeCount; other++)
            {
                float distance = (cutEdges1[current * 2 + 1] - cutEdges1[other * 2 + 0]).sqrMagnitude;

                if (distance < nearestDistance)
                {
                    nearest = other;
                    nearestDistance = distance;
                }
            }

            // Is the current edge the last edge in this edge loop?
            if (nearest == start && current > start)    
            {
                int pointStart = points.Count;
                int pointCounter = pointStart;

                // Add this edge loop to the triangulation lists
                for (int edge = start; edge < current; edge++)
                {
                    points.Add(cutEdges1[edge * 2 + 0]);
                    outline.Add(pointCounter++);
                    outline.Add(pointCounter);
                }

                points.Add(cutEdges1[current * 2 + 0]);
                outline.Add(pointCounter);
                outline.Add(pointStart);

                // Start a new edge loop
                start = next;
            }
            else if (next < edgeCount)
            {
                // Move the nearest edge so that it follows the current edge
                Vector3 n0 = cutEdges1[next * 2 + 0];
                Vector3 n1 = cutEdges1[next * 2 + 1];

                cutEdges1[next * 2 + 0] = cutEdges1[nearest * 2 + 0];
                cutEdges1[next * 2 + 1] = cutEdges1[nearest * 2 + 1];

                cutEdges1[nearest * 2 + 0] = n0;
                cutEdges1[nearest * 2 + 1] = n1;
            }
        }

        if (points.Count > 0)             //调用triangulator
        {
            // Triangulate the outline
            int[] newEdges, newTriangles, newTriangleEdges;

            ITriangulator triangulator = new Triangulator(points, outline, localSplitPlaneNormal);

            triangulator.Fill(out newEdges, out newTriangles, out newTriangleEdges);

            // Add the new vertices
            int offsetA = newVertices1.Count;
            //int offsetB = newVertices2.Count;

            newVertices1.AddRange(points);
            //newVertices2.AddRange(points);


            Vector3 normalA = -localSplitPlaneNormal;
            Vector3 normalB = localSplitPlaneNormal;

            for (int i = 0; i < points.Count; i++)
            {
                newNormals1.Add(normalA);
                //newNormals2.Add(normalB);
            }


            // Add the new triangles
            int newTriangleCount = newTriangles.Length / 3;

            for (int i = 0; i < newTriangleCount; i++)
            {
                newTriangles1.Add(offsetA + newTriangles[i * 3 + 0]);
                newTriangles1.Add(offsetA + newTriangles[i * 3 + 2]);
                newTriangles1.Add(offsetA + newTriangles[i * 3 + 1]);

                //newTriangles2.Add(offsetB + newTriangles[i * 3 + 0]);
                //newTriangles2.Add(offsetB + newTriangles[i * 3 + 1]);
                //newTriangles2.Add(offsetB + newTriangles[i * 3 + 2]);
            }
        }
       
        //--------------------------------------------------------------
        int edgeCount2 = cutEdges2.Count / 2;

        points = new List<Vector3>(edgeCount);
        outline = new List<int>(edgeCount * 2);

        start = 0;

        for (int current = 0; current < edgeCount; current++)
        {
            int next = current + 1;

            // Find the next edge
            int nearest = start;
            float nearestDistance = (cutEdges2[current * 2 + 1] - cutEdges2[start * 2 + 0]).sqrMagnitude;

            for (int other = next; other < edgeCount; other++)
            {
                float distance = (cutEdges2[current * 2 + 1] - cutEdges2[other * 2 + 0]).sqrMagnitude;

                if (distance < nearestDistance)
                {
                    nearest = other;
                    nearestDistance = distance;
                }
            }

            // Is the current edge the last edge in this edge loop?
            if (nearest == start && current > start)
            {
                int pointStart = points.Count;
                int pointCounter = pointStart;

                // Add this edge loop to the triangulation lists
                for (int edge = start; edge < current; edge++)
                {
                    points.Add(cutEdges2[edge * 2 + 0]);
                    outline.Add(pointCounter++);
                    outline.Add(pointCounter);
                }

                points.Add(cutEdges2[current * 2 + 0]);
                outline.Add(pointCounter);
                outline.Add(pointStart);

                // Start a new edge loop
                start = next;
            }
            else if (next < edgeCount)
            {
                // Move the nearest edge so that it follows the current edge
                Vector3 n0 = cutEdges2[next * 2 + 0];
                Vector3 n1 = cutEdges2[next * 2 + 1];

                cutEdges2[next * 2 + 0] = cutEdges2[nearest * 2 + 0];
                cutEdges2[next * 2 + 1] = cutEdges2[nearest * 2 + 1];

                cutEdges2[nearest * 2 + 0] = n0;
                cutEdges2[nearest * 2 + 1] = n1;
            }
        }

        ///<summary>为了将整个面封闭起来 需额外再增加一些点</summary>


        if (points.Count > 0)             //调用triangulator
        {
            // Triangulate the outline
            int[] newEdges, newTriangles, newTriangleEdges;

            ITriangulator triangulator = new Triangulator(points, outline, localSplitPlaneNormal);

            triangulator.Fill(out newEdges, out newTriangles, out newTriangleEdges);

            // Add the new vertices
            //int offsetA = newVertices1.Count;
            int offsetB = newVertices1.Count;

            newVertices1.AddRange(points);
            //newVertices2.AddRange(points);


            Vector3 normalA = -localSplitPlaneNormal;
            Vector3 normalB = localSplitPlaneNormal;

            for (int i = 0; i < points.Count; i++)
            {
                //newNormals1.Add(normalA);
                newNormals1.Add(normalB);
                
            }


            // Add the new triangles
            int newTriangleCount = newTriangles.Length / 3;

            for (int i = 0; i < newTriangleCount; i++)
            {
                //newTriangles1.Add(offsetA + newTriangles[i * 3 + 0]);
                //newTriangles1.Add(offsetA + newTriangles[i * 3 + 2]);
                //newTriangles1.Add(offsetA + newTriangles[i * 3 + 1]);

                newTriangles1.Add(offsetB + newTriangles[i * 3 + 0]);
                newTriangles1.Add(offsetB + newTriangles[i * 3 + 1]);
                newTriangles1.Add(offsetB + newTriangles[i * 3 + 2]);
            }
        }
        int trianglationOverTime = System.Environment.TickCount;
        //GameObject part1 = new GameObject(beCutThing.name + "(1)");
        //GameObject part2 = new GameObject(beCutThing.name + "(2)");
        //part1.AddComponent<MeshFilter>();
        //part1.AddComponent<MeshRenderer>();
        //part2.AddComponent<MeshFilter>();
        //part2.AddComponent<MeshRenderer>();
        //part1.GetComponent<MeshRenderer>().material = beCutThing.GetComponent<MeshRenderer>().material;
        //part2.GetComponent<MeshRenderer>().material = beCutThing.GetComponent<MeshRenderer>().material;

        //GameObject part1 = Instantiate(beCutThing, null);
        //part1.name = beCutThing.name + "A";
        //GameObject part2 = Instantiate(beCutThing, null);
        //part2.name = beCutThing.name + "B";

        beCutThing.GetComponent<MeshFilter>().mesh.Clear();
        beCutThing.GetComponent<MeshFilter>().mesh.vertices = newVertices1.ToArray();
        beCutThing.GetComponent<MeshFilter>().mesh.normals = newNormals1.ToArray();
        beCutThing.GetComponent<MeshFilter>().mesh.triangles = newTriangles1.ToArray();


        //part1.GetComponent<MeshFilter>().mesh.Clear();
        //part1.GetComponent<MeshFilter>().mesh.vertices = newVertices1.ToArray();
        //part1.GetComponent<MeshFilter>().mesh.normals = newNormals1.ToArray();
        //part1.GetComponent<MeshFilter>().mesh.triangles = newTriangles1.ToArray();

        //part2.GetComponent<MeshFilter>().mesh.Clear();
        //part2.GetComponent<MeshFilter>().mesh.vertices = newVertices2.ToArray();
        //part2.GetComponent<MeshFilter>().mesh.normals = newNormals2.ToArray();
        //part2.GetComponent<MeshFilter>().mesh.triangles = newTriangles2.ToArray();



        //part1.AddComponent<MeshCollider>();
        //part1.GetComponent<MeshCollider>().convex = true;
        //part1.GetComponent<MeshCollider>().cookingOptions = MeshColliderCookingOptions.InflateConvexMesh;
        //part1.AddComponent<Interactable>();
        //part1.AddComponent<Choosable>();
        //part2.AddComponent<MeshCollider>();
        //part2.GetComponent<MeshCollider>().convex = true;
        //part2.GetComponent<MeshCollider>().cookingOptions = MeshColliderCookingOptions.InflateConvexMesh;
        //part2.AddComponent<Interactable>();
        //part2.AddComponent<Choosable>();
        //beCutThing.SetActive(false);
        //part1.transform.position = beCutThing.transform.position + cutPlane.normal * 0.01f;
        //part2.transform.position = beCutThing.transform.position - cutPlane.normal * 0.01f;
        //part1.transform.localScale = beCutThing.transform.localScale;
        //part2.transform.localScale = beCutThing.transform.localScale;
        //part1.transform.rotation = beCutThing.transform.rotation;
        //part2.transform.rotation = beCutThing.transform.rotation;
        int isolateStartTime = System.Environment.TickCount;
        Isolate.IsolateMesh(beCutThing);
        //Isolate.IsolateMesh(part2);
        //part1.tag = "Objects";
        //part2.tag = "Objects";
        int overTime = System.Environment.TickCount;
        Debug.Log("切割总耗时：" + (overTime - startTime) + "      三角面分割耗时：" + (cutOverTime - startTime) + "            缝补耗时：" + (trianglationOverTime - cutOverTime) + "           分离耗时：" + (overTime - trianglationOverTime));

    }
    protected void SplitTriangle(Vector3 pointOnPlane, Vector3 planeNormal, Vector3[] vertices, Vector3[] normals, int top, int cw, int ccw, out Vector3 cwIntersection, out Vector3 ccwIntersection, out Vector3 cwNormal, out Vector3 ccwNormal)
    {

        Vector3 v0 = vertices[top];
        Vector3 v1 = vertices[cw];
        Vector3 v2 = vertices[ccw];

        // Intersect the top-cw edge with the plane
        float cwDenominator = Vector3.Dot(v1 - v0, planeNormal);
        float cwScalar = Mathf.Clamp01(Vector3.Dot(pointOnPlane - v0, planeNormal) / cwDenominator);

        // Intersect the top-ccw edge with the plane
        float ccwDenominator = Vector3.Dot(v2 - v0, planeNormal); 
        float ccwScalar = Mathf.Clamp01(Vector3.Dot(pointOnPlane - v0, planeNormal) / ccwDenominator);

        // Interpolate vertex positions                               计算新点的位置
        Vector3 cwVertex = new Vector3();

        cwVertex.x = v0.x + (v1.x - v0.x) * cwScalar;
        cwVertex.y = v0.y + (v1.y - v0.y) * cwScalar;
        cwVertex.z = v0.z + (v1.z - v0.z) * cwScalar;

        Vector3 ccwVertex = new Vector3();

        ccwVertex.x = v0.x + (v2.x - v0.x) * ccwScalar;
        ccwVertex.y = v0.y + (v2.y - v0.y) * ccwScalar;
        ccwVertex.z = v0.z + (v2.z - v0.z) * ccwScalar;

        // Interpolate normals

        Vector3 n0 = normals[top];
        Vector3 n1 = normals[cw];
        Vector3 n2 = normals[ccw];

        Vector3 cwNormalx = new Vector3();              //计算新点的法线

        cwNormalx.x = n0.x + (n1.x - n0.x) * cwScalar;
        cwNormalx.y = n0.y + (n1.y - n0.y) * cwScalar;
        cwNormalx.z = n0.z + (n1.z - n0.z) * cwScalar;

        cwNormalx.Normalize();

        Vector3 ccwNormalx = new Vector3();

        ccwNormalx.x = n0.x + (n2.x - n0.x) * ccwScalar;
        ccwNormalx.y = n0.y + (n2.y - n0.y) * ccwScalar;
        ccwNormalx.z = n0.z + (n2.z - n0.z) * ccwScalar;

        ccwNormalx.Normalize();
        cwNormal = cwNormalx;
        ccwNormal = ccwNormalx;


        cwIntersection = cwVertex;
        ccwIntersection = ccwVertex;
    }

    /// <summary>
    /// 补充的方法 用于针对于对一个横断面没有一刀切断的情况
    /// 
    /// </summary>
    protected void SplitTriangle_other(Vector3 pointOnPlane, Vector3 planeNormal, Vector3[] vertices, Vector3[] normals, int top, 
        int cw, int ccw,out Vector3 core,out Vector3 coreNormal,Vector3[] cutPlanePoints)
    {
        Debug.Log("SplitTriangle_other behin~");
        Vector3 v0 = vertices[top];
        Vector3 v1 = vertices[cw];
        Vector3 v2 = vertices[ccw];

        //t,u,v三个参数
        float t=0,u=0,v=0;
        core = new Vector3(0, 0, 0);
        

        // Interpolate normals

        Vector3 n0 = normals[top];
        Vector3 n1 = normals[cw];
        Vector3 n2 = normals[ccw];

        //三角面片法向量
        Vector3 normal;
        normal = Vector3.Normalize(Vector3.Cross(v1 - v0, v2 - v0));
        

        ///<summary>
        ///调用LinePlane_Inetersection类来计算交点
        ///需要注意 现在不确定相交边是哪一条
        ///</summary>
        for (int i = 0; i < 4; i++)
        {
            Debug.Log("cutPlanePoints.Length:" + cutPlanePoints.Length);  
            LinePlane_Inetersection linePlane_Inetersection = new LinePlane_Inetersection(vertices[top], vertices[cw], vertices[ccw], 
                normal, cutPlanePoints[i], cutPlanePoints[(i + 1) % 3], t, u, v);
            //在三角面片内部
            if(linePlane_Inetersection.isIntersectant)
            {
                Debug.Log("第"+i+"次射线碰撞检测:"+linePlane_Inetersection.isIntersectant);
                core = linePlane_Inetersection.Intersection;
                //coreNormal = normal;
                break;
            }
            else
            {
                Debug.Log("不相交");
                //core = new Vector3(0, 0, 0);
                //coreNormal = new Vector3(0, 0, 0);
                //删除已实例化的类
                Destroy(linePlane_Inetersection);
                if(linePlane_Inetersection!=null)
                {
                    Debug.Log("destroy");
                    linePlane_Inetersection = null;
                }
                    
                continue;
            }
        }

        //暂时修改
        //core = cwNormal;
        coreNormal= normal;
        Debug.Log("core坐标:" + core);
    }
    private Vector3 GetDifferentVector3(Vector3 v)//在float有效数字最后一位加1（使切割产生的重复点不重复）
    {
        float x = v.x;
        float n = float.Epsilon;
        float y = x + n;
        while (x == y) { n = n * 2; y += n; }
        v.x = y;
        return v;
    }
    
}
/// <summary>
/// 记录线和三角形相交的类
/// </summary>
public class LinePlane_Inetersection : MonoBehaviour
{
    
    Vector3 v0, v1, v2,n,m,dir;
    Vector3 normal;
    float t, u, v;
    public Vector3 Intersection;
    public bool isIntersectant = false;
    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="V0">三角形的三个点之一</param> 
    /// <param name="V1">三角形的三个点之一</param> 
    /// <param name="V2">三角形的三个点之一</param> 
    /// <param name="normal">三角面法向量</param> 
    /// <param name="n">线段的一个点 且作为起点</param>
    /// <param name="m">线段的一个点</param>
    /// <param name="dir">射线方向</param>
    /// <param name="Intersection">交点</param>
    public LinePlane_Inetersection(Vector3 V0, Vector3 V1, Vector3 V2, Vector3 normal,
        Vector3 n,Vector3 m,float t,float u,float v)
    {
        Debug.Log("LinePlane_Inetersection bigin~");
        this.v0 = V0;
        this.v1 = V1;
        this.v2 = V2;
        this.normal = normal;
        this.n = n;
        this.m = m;
        dir =(m - n) / (m - n).sqrMagnitude;
        this.isIntersectant = IsIntersectant();
    }
    ///<summary>判断射线是否与三角面相交</summary>
    private bool IsIntersectant()
    {
        return isIntersectant;
    }
    /*
    private bool IsIntersectant()
    {//out float t, out float u, out float v
        // E1
        Vector3 E1 = v1 - v0;
        // E2
        Vector3 E2 = v2 - v0;
        // P
        Vector3 P = Vector3.Cross(E2, dir);

        // determinant
        float det = Vector3.Dot(P, E1);

        // keep det > 0, modify T accordingly
        Vector3 T;
        if (det > 0)
        {
            u = 0;
            v = 0;
            t = 0;
            T = n - v0;
        }
        else
        {
            u = 0;
            v = 0;
            t = 0;
            T = v0 - n;
            det = -det;
        }

        // If determinant is near zero, ray lies in plane of triangle
        if (det < 0.0001f)
        {
            //u = 0;
            //v = 0;
            //t = 0;
            return isIntersectant;
        }
            

        // Calculate u and make sure u <= 1
        u = Vector3.Dot(P,T);
        if (u < 0.0f || u > det)
        {
            return isIntersectant;
        }
            

        // Q
        Vector3 Q = Vector3.Cross(E1,T);

        // Calculate v and make sure u + v <= 1
        v = Vector3.Dot(Q,dir);
        if (v < 0.0f || u + v > det)
        {
            return isIntersectant;
        }
            

        // Calculate t, scale parameters, ray intersects triangle
        t = Vector3.Dot(Q,E2);
        Debug.Log("t:" + t);

        float fInvDet = 1.0f / det;
        t *= fInvDet;
        u *= fInvDet;
        v *= fInvDet;

        Intersection = n + t * dir;
        Debug.Log("Intersection:" + Intersection);

        isIntersectant = true;
        return isIntersectant;
        //return isIntersectant;
    }
    */
}
public class LinePlane_Inetersection_
{
    Vector3 v0, v1, v2, n, m, dir;
    Vector3 normal;
    //float t, u, v;
    public Vector3 Intersection;
    public bool isIntersectant = false;
    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="V0">三角形的三个点之一</param> 
    /// <param name="V1">三角形的三个点之一</param> 
    /// <param name="V2">三角形的三个点之一</param> 
    /// <param name="normal">三角面法向量</param> 
    /// <param name="n">线段的一个点 且作为起点</param>
    /// <param name="m">线段的一个点</param>
    /// <param name="dir">射线方向</param>
    /// <param name="Intersection">交点</param>
    public LinePlane_Inetersection_(Vector3 V0, Vector3 V1, Vector3 V2, Vector3 normal,
        Vector3 n, Vector3 m, float t, float u, float v)
    {
        Debug.Log("LinePlane_Inetersection bigin~");
        this.v0 = V0;
        this.v1 = V1;
        this.v2 = V2;
        this.normal = normal;
        this.n = n;
        this.m = m;
        dir = (m - n) / (m - n).sqrMagnitude;
        

        //计算交点坐标Intersection
        t = Vector3.Dot(v0 - m, normal) / Vector3.Dot(dir, normal);
        Intersection = t * dir + m;

        //判断是否在三角形内
        this.isIntersectant = IsIntersectant();
    }
    ///<summary>判断射线是否与三角面相交</summary>
    /// 判断点P是否在三角形ABC内(同向法)
    private bool IsIntersectant()
    {
        isIntersectant = SameSide(v0, v1, v2, Intersection) && SameSide(v1, v2, v0, Intersection) && SameSide(v2, v0, v1, Intersection);
        return isIntersectant;
    }
    bool SameSide(Vector3 A, Vector3 B, Vector3 C, Vector3 P)
    {
        Vector3 AB = B - A;
        Vector3 AC = C - A;
        Vector3 AP = P - A;

        Vector3 v1 = Vector3.Cross(AB,AC);
        Vector3 v2 = Vector3.Cross(AB,AP);

        // v1 and v2 should point to the same direction
        //return v1.Dot(v2) >= 0 ;
        return Vector3.Dot(v1,v2) > 0;
    }
}
